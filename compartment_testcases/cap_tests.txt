primary_boot -> printf -> vprintf -> { putstring -> htif_console_putchar -> do_tohost_fromhost -> __set_tohost ->  __check_fromhost }(loop)
	|                        |  
	|                        |
	|						 ------> vsnprintf
	|						 |
	|					     ------> strlen
	|										
	----------> htif_poweroff

Total functions : 9

Test Cases:
I). Non-254/255 tests
1). curr_cap -> curr_cap (1 -> 1) / (output present) : Passed 
2). curr_cap -> valid_cap (1 -> 2) (mapping present) / (output present) : Passed
3). curr_cap -> invalid_cap (1 -> 2) (mapping not present) / (output not present) : Passed 

II). 255 tests
4). curr_cap -> 255 -> 255 (1 -> 255) / (output present) : Passed 
5). curr_cap -> 255 -> curr_cap (1 -> 255 -> 1) / (output present) : Passed 
6)*. curr_cap -> 255 -> valid_cap (1 -> 255 -> 2) (mapping present) / (output present) : Passed
7). curr_cap -> 255 -> invalid_cap (1 -> 255 -> 2) (mapping not present) / (output not present) : Passed

III). 254 tests
8). curr_cap -> 254 -> 254 (1 -> 254) / (output present) : Passed
9)*. curr_cap -> 254 -> curr_cap (1 -> 254 -> 1) / (output present) : Passed
10). curr_cap -> 254 -> valid_cap (1 -> 254 -> 2) (mapping present) / (output not present) : Passed
11). curr_cap -> 254 -> invalid_cap (1 -> 254 -> 2) (mapping not present) / (output not present) : Passed

12)*. curr_cap -> 255 -> 254 -> curr_cap (1 -> 255 -> 254 -> 1) / (output present) : Passed
13). curr_cap -> 255 -> 254 -> valid_cap (1 -> 255 -> 254 -> 2) (mapping present) (output not present) : Passed
14). curr_cap -> 255 -> 254 -> invalid_cap (1 -> 255 -> 254 -> 2) (mapping not present) / (output not present) : Passed

15)*. curr_cap -> 254 -> 255 -> curr_cap (1 -> 254 -> 255 -> 1) / (output present) : Passed 
16). curr_cap -> 254 -> 255 -> valid_cap (1 -> 254 -> 255 -> 2) (mapping present) / (output not present) : Passed
17). curr_cap -> 254 -> 255 -> invalid_cap (1 -> 254 -> 255 -> 2) (mapping not present) / (output not present) : Passed

18). curr_cap -> 254 -> curr_cap -> 255 -> curr_cap (1 -> 254 -> 1 -> 255 -> 1) / (output present) : Passed
19)*. curr_cap -> 254 -> curr_cap -> 255 -> valid_cap (1 -> 254 -> 1 -> 255 -> 2) (mapping present) / (output present) : Passed
20). curr_cap -> 254 -> curr_cap -> 255 -> invalid_cap (1 -> 254 -> 1 -> 255 -> 2) (mapping not present) / (output not present) : Passed

IV).Miscellaneous tests
21). curr_cap -> valid_cap -> curr_cap (1 -> 2 -> 1) (mapping present) / (output present) : Passed
22). curr_cap -> valid_cap -> curr_cap (1 -> 2 -> 1) (mapping not present) / (output not present) : Passed

______________________________________________________________________________________________________________________________________________
Plan:
For each case, we should have .cap files, cap_matrix files. The .cap file of the hello.c should be fixed.

Compartment Values:
1). compat.cc & timer.cc file functions in different isolated compartments, 210 & 253 respectively
2). boot_primary in 1 always, fixed in all test cases. boot_secondary in 128 (some arbitrary compartment)
3). All of the loop functions, i.e. from putstring to __check_fromhost in the same compartment, either all in 255 or 254 or non-255/254 compartment.
4). htif_poweroff is fixed with compartment 255, htif_syscall is with 8 & htif_console_getchar is fixed with 12.
5). string.cc is fixed with 254. So both strlen & vsnprintf are 254. 
6). trap.cc is fixed with 255.
6). dummy function in hello.c is fixed with compartment 34
7). Main things to compartmentalize are the following functions: 
	htif.cc:
		__check_fromhost:
		__set_tohost:
		do_tohost_fromhost:
		htif_console_putchar:
	print.cc
		vprintf:
		printf:
		putstring:



Observations:
1). In Test 9:
		Debug_Checkcap: 1 / 1 @ 0x800006c2 

		Debug_Checkcap: 1 / 0 @ 0x800006c2 

		So once if it is crossing 254 to curr_cap or changing compartments, the same checkcap instruction executes twice. Why should we again execute checkcap 
		instruction? Any reason?
2). In Test 10: 
		jumping from 254 to valid_comp triggers exception CHECKCAP_ALL_COND_FAIL. 



***************************************************************************************************************************************************
Note: Compartment numbering usually starts from 0. Here for ease of use, we are starting with 1.

6, 9, 12, 15, 19